#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, bool_t, double_t, int_t

gen = ParameterGenerator()

gen.add("enabled", bool_t, 0, "Whether to apply this plugin or not", True)
gen.add("footprint_clearing_enabled", bool_t, 0, "Whether to clear the robot's footprint of lethal obstacles", True)
gen.add("ec_seg_distance", double_t, 0, "Euclidean distance for the clustering (see PCL.)", 0.2, 0, 3.0)
gen.add("ec_cluster_min_size", int_t, 0, "Minimum cluster size (see PCL.)", 5, 1, 1000)
gen.add("size_of_cluster_rejection", int_t,0 , "Reject the cluster which is smaller than this size", 5, 1, 5000)
gen.add("voxel_resolution", double_t, 0, "Voxel resolution", 0.01, 0.01, 1.0)
gen.add("check_radius", double_t, 0, "If a marking has no neighbor within this distance, it will be cleared", 0.1, 0.01, 1.0)

combo_enum = gen.enum([gen.const("Overwrite", int_t,  0, "Overwrite values"),
                       gen.const("Maximum",   int_t,  1, "Take the maximum of the values"),
                       gen.const("Nothing",   int_t, 99, "Do nothing")],
                       "Method for combining layers enum")
gen.add("combination_method", int_t, 0, "Method for combining two layers", 1, edit_method=combo_enum)


#gen.add("max_obstacle_range", double_t, 0, "The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters.", 2.5, 0, 50)
#gen.add("raytrace_range", double_t, 0, "The default range in meters at which to raytrace out obstacles from the map using sensor data.", 3, 0, 50)
exit(gen.generate("costmap_depth_camera", "costmap_depth_camera", "DepthCameraPlugin"))
